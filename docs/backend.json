{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user within the DentiSystems application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user."
        },
        "email": {
          "type": "string",
          "description": "User's email address.",
          "format": "email"
        },
        "displayName": {
          "type": "string",
          "description": "User's display name."
        },
        "photoURL": {
          "type": "string",
          "description": "URL of the user's profile photo.",
          "format": "uri"
        },
        "emailVerified": {
          "type": "boolean",
          "description": "Indicates if the user's email address has been verified."
        },
        "role": {
          "type": "string",
          "description": "User's role (e.g., user, admin, enterprise)."
        },
        "subscriptionId": {
          "type": "string",
          "description": "Reference to Subscription. (Relationship: User 1:1 Subscription)"
        }
      },
      "required": [
        "id",
        "email",
        "displayName",
        "emailVerified"
      ]
    },
    "Subscription": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Subscription",
      "type": "object",
      "description": "Represents a user's subscription to DentiSystems services.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the subscription."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:1 Subscription)"
        },
        "tier": {
          "type": "string",
          "description": "The subscription tier (e.g., starter, enterprise)."
        },
        "startDate": {
          "type": "string",
          "description": "The date the subscription started.",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "description": "The date the subscription ends.",
          "format": "date-time"
        },
        "autoRenew": {
          "type": "boolean",
          "description": "Indicates if the subscription will automatically renew."
        }
      },
      "required": [
        "id",
        "userId",
        "tier",
        "startDate",
        "endDate"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles. The 'userId' is the Firebase Auth UID. The 'role' is managed via subscription.",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase Auth UID of the user."
            }
          ]
        }
      },
      {
        "path": "/subscriptions/{subscriptionId}",
        "definition": {
          "entityName": "Subscription",
          "schema": {
            "$ref": "#/backend/entities/Subscription"
          },
          "description": "Stores subscription details for each user. Contains 'userId' for reverse lookup.",
          "params": [
            {
              "name": "subscriptionId",
              "description": "The unique ID of the subscription."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to support the DentiSystems website, focusing on secure access control and efficient data retrieval. It leverages path-based ownership for user-specific data and membership maps for collaborative data. Denormalization is used to avoid `get()` calls in security rules, ensuring authorization independence.\n\n*   `/users/{userId}`: Stores user profiles. Subscription information is stored separately in `/subscriptions/{subscriptionId}`, which holds a reference to the user ID to avoid having to read the user document to get subscription information, since the subscription is associated with the user in a 1:1 relationship.\n*   `/subscriptions/{subscriptionId}`: Stores user subscription details. It includes the `userId` for reverse lookup, enabling efficient querying of a user's subscription status. It avoids storing the role in the user document. A user's effective role is determined by the subscription's `tier` field. No denormalization is needed because there's no access control based on subscription for the user data; only the tier needs to be available in the application for gating features.\n\nThe structure enables QAPs by:\n\n*   Segregating public content (marketing collections) from private user data (dashboard, subscriptions). This segregation allows for simple rules that grant public read access to marketing collections while restricting access to authenticated users for private data.\n*   Utilizing path-based ownership (`/users/{userId}`) for user-specific data, which allows for simple and efficient security rules based on `request.auth.uid`."
  }
}