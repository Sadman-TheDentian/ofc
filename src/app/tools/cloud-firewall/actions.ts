
'use server';

import { addDoc, collection, serverTimestamp } from 'firebase/firestore';
import { initializeFirebase } from '@/firebase';

interface Rule {
  action: 'Allow' | 'Deny';
  port: string;
  protocol: 'TCP' | 'UDP';
  source: string;
}

interface FirewallConfig {
  serverIP: string;
  rules: Rule[];
}

export async function generateFirewallConfig(
  data: FirewallConfig,
  userId: string
): Promise<{
  success: boolean;
  config?: string;
  message?: string;
}> {
  if (!userId) {
    return { success: false, message: 'Authentication required.' };
  }

  // Use the centralized initializeFirebase function
  const { firestore } = initializeFirebase();

  const { serverIP, rules } = data;
  if (!serverIP || !rules || rules.length === 0) {
    return { success: false, message: 'Server IP and at least one rule are required.' };
  }

  // Generate ufw configuration
  let config = `# Firewall configuration for ${serverIP}\n`;
  config += '# Generated by DentiSystems Cloud Firewall Lite\n\n';
  config += '# Reset existing rules\n';
  config += 'sudo ufw reset\n';
  config += 'sudo ufw default deny incoming\n';
  config += 'sudo ufw default allow outgoing\n\n';
  config += '# Apply custom rules\n';

  rules.forEach((rule) => {
    config += `sudo ufw ${rule.action.toLowerCase()} from ${rule.source} to any port ${rule.port} proto ${rule.protocol.toLowerCase()}\n`;
  });

  config += '\n# Enable the firewall\n';
  config += 'sudo ufw enable\n';

  try {
    // Save the configuration to Firestore
    await addDoc(collection(firestore, 'firewallRules'), {
      userId: userId,
      serverIP,
      rules,
      generatedConfig: config,
      createdAt: serverTimestamp(),
    });

    return { success: true, config };
  } catch (error) {
    console.error('Error saving firewall config:', error);
    return { success: false, message: 'Could not save firewall configuration.' };
  }
}
