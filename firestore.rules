/**
 * @file Firebase Security Rules for DentiSystems Firestore.
 *
 * @corePhilosophy This ruleset enforces a strict user-ownership model for user profiles and subscriptions.
 *   Users can only read and write their own profile data, and subscriptions are similarly restricted.
 *
 * @dataStructure
 *   - /users/{userId}: Stores user profiles, with 'userId' matching the Firebase Auth UID.
 *   - /subscriptions/{subscriptionId}: Stores subscription details, linked to users via the 'userId' field.
 *
 * @keySecurityDecisions
 *   - User listing is explicitly denied.
 *   - Subscription access is restricted to the associated user.
 *   - Data validation is minimal in this prototyping phase, focusing on ownership and relationship integrity.
 *
 * @denormalizationForAuthorization N/A (Ownership is validated via path segments and document fields.)
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles, ensuring users can only access their own data.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their profile at /users/user_abc.
     * @deny (create) User with UID 'user_xyz' attempts to create a profile at /users/user_abc.
     * @allow (get, list, update, delete) User with UID 'user_abc' can read/write their profile at /users/user_abc.
     * @deny (get, list, update, delete) User with UID 'user_xyz' attempts to read/write the profile at /users/user_abc.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in and owns the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if an existing user is an owner.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      // Allow the user to create their own profile if the UID matches.
      allow create: if isSignedIn() && isOwner(userId);

      // Allow reading the document if the user is the owner.
      allow get: if isOwner(userId);

      // Allow listing if the user is the owner.
      allow list: if false;

      // Allow updating the document if the user is the owner and the user id is immutable.
      allow update: if isExistingOwner(userId);

      // Allow deleting the document if the user is the owner.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects subscription documents, ensuring users can only access their own subscription.
     * @path /subscriptions/{subscriptionId}
     * @allow (create) User with UID 'user_abc' can create a subscription.
     * @deny (create) User with UID 'user_xyz' attempts to create a subscription.
     * @allow (get, list, update, delete) User with UID 'user_abc' can read/write their subscription.
     * @deny (get, list, update, delete) User with UID 'user_xyz' attempts to read/write the subscription.
     * @principle Enforces document ownership for all operations.
     */
    match /subscriptions/{subscriptionId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if an existing user is an owner.
      function isExistingOwner() {
        return isSignedIn() && resource.data.userId == request.auth.uid;
      }

      // Allow creating if signed in and the userId matches auth.uid
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;

      // Allow reading if the user is signed in and the userId matches auth.uid.
      allow get: if isExistingOwner();

      // Allow listing if the user is signed in and the userId matches auth.uid.
      allow list: if false;

      // Allow updating the document if the user is signed in, userId matches auth.uid and userId is immutable.
      allow update: if isExistingOwner() && request.resource.data.userId == resource.data.userId;

      // Allow deleting the document if the user is signed in and the userId matches auth.uid.
      allow delete: if isExistingOwner();
    }
  }
}